# -*- coding: utf-8 -*-
"""
Created on Tue Aug 22 15:22:07 2017

To read the output of APEX RCH and compare with observed data
by calculating statistics.

This program was developed to get the output files from the 
.RCH files generated by the APEX model. 
The variables shall follow the settings in the PRNT0806.DAT
in this model. Example can be find in the run file.

Then, the RCH file is processed using AWK program through
cygwin using the sh01_apexrch_extract.sh file. This script
extracts data for the interested stations. 
Then, this python program using the data from each station
and generate figures and statistics for the simulation.


@author: Qingyu.Feng
"""
###########################################################################
## System setup
# For folder check
import os
# For copying files
import shutil
# Making graphs
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import pandas as pd
import numpy as np
import datetime

from py01_apexrch_funs import *
###########################################################################


#########################################################################
# Definning variables
sim_start_yr = 2013
sim_end_yr = 2015

df_start_time = "2011-01-01"
df_end_time = "2016-12-31"


simyrlst = []
while sim_start_yr <= sim_end_yr:
    simyrlst.append(sim_start_yr)
    sim_start_yr += 1

monthlst = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

## I will add another variable storing the start and 
## end year to be calculated.
#cal_styr = 1995
#cal_endyr = 2000
## Year list for calculating statistics
#calyrlst = []
#while cal_styr <= cal_endyr:
#    calyrlst.append(cal_styr)
#    cal_styr += 1
#    
#val_styr = 2001
#val_endyr = 2005
## Year list for calculating statistics
#valyrlst = []
#while val_styr <= val_endyr:
#    valyrlst.append(val_styr)
#    val_styr += 1    

# Station list: storing all stations for looping.
stnnumlst = [74, 144, 201]
stnnamelst = ["Fuling", "Jianshan", "Tuojia"]
    

index = pd.date_range(df_start_time, df_end_time, freq = "D")
dateformat = "%#m/%#d/%Y"
column = ["ObsFlow(m3/s)", "SimFlow(m3/s)"]

#########################################################################



#########################################################################
## Input output folders      
# Simulated
siminfd = "rch_flow_intereststns/"
if not os.path.isdir(siminfd):
    print("Input folder for simulation does not exist, please check")

obsinfd = "observedflowwq/"
if not os.path.isdir(obsinfd):
    print("Input folder for observations of flow does not exist, please check")
    
outfdn = "rchobsvssim_day"
if not os.path.isdir(outfdn):
    os.mkdir(outfdn)
else:
    shutil.rmtree(outfdn, ignore_errors=False, onerror=None)
    os.mkdir(outfdn)
#########################################################################


#########################################################################
# Read in observed data for each station
lif_obs = 0
lif_obs = read_text(obsinfd + "2012-2016Flow.csv")

# Processing data lines
lif_obs = reformat_obslines(lif_obs)

# Also, the name of each file will be added to the RUN list
lst_prnnames = []
    
# Function
for stnidx in range(len(stnnumlst)):

    print("processing station", stnnumlst[stnidx])

    lif_sim = 0
    lif_sim = read_text(siminfd + "allvar_%s.apexsimrch" %(stnnumlst[stnidx]))

    # Processing data lines
    lif_sim = reformat_simlines(lif_sim)        
    
    # Generate dataframe 
    df_day = generate_timeframe(df_start_time,
                                        df_end_time,
                                        index,
                                        column)
    
    # Put data into dataframe
    # The data need to be processed first.
    df_day = filling_df(lif_obs, 
                        df_day, 
                        stnnumlst[stnidx], 
                        lif_sim, 
                        column,
                        dateformat)
    

    # After processing them, it is time to calculate.
    write_prn(df_day, 
              outfdn, 
              stnnumlst[stnidx],
              lst_prnnames,
              column
              )
    
    
    #Making graphs for each station
    draw_plot(df_day, 
              outfdn, 
              stnnumlst[stnidx],
              column)
    
# After writing the prns, the RUN.dat will be written
write_rundat(outfdn, lst_prnnames)


# Copy the cal and run
copy_cal_run(outfdn)
